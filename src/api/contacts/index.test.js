import request from 'supertest'
import { apiRoot } from '../../config'
import express from '../../services/express'
import routes, { Contacts } from '.'

const app = () => express(apiRoot, routes)

let contacts

beforeEach(async () => {
  contacts = await Contacts.create({})
})

test('POST /contacts 201', async () => {
  const { status, body } = await request(app())
    .post(`${apiRoot}`)
    .send({ alt_address_city: 'test', alt_address_country: 'test', alt_address_postalcode: 'test', alt_address_state: 'test', alt_address_street: 'test', alt_address_street_2: 'test', birthdate: 'test', child_1_birthdate: 'test', child_1_name: 'test', child_2_birthdate: 'test', child_2_name: 'test', child_3_birthdate: 'test', child_3_name: 'test', child_4_birthdate: 'test', child_4_name: 'test', child_5_birthdate: 'test', child_5_name: 'test', child_6_birthdate: 'test', child_6_name: 'test', company: 'test', date_entered: 'test', date_modified: 'test', deleted: 'test', department: 'test', description: 'test', email1: 'test', email2: 'test', first_name: 'test', fkq_holiday_card_lists: 'test', hire_date: 'test', id: 'test', last_name: 'test', mailing_label_home: 'test', mailing_label_office: 'test', marital_status: 'test', marriage_date: 'test', phone_fax: 'test', phone_home: 'test', phone_mobile: 'test', phone_other: 'test', phone_work: 'test', primary_address_city: 'test', primary_address_country: 'test', primary_address_postalcode: 'test', primary_address_state: 'test', primary_address_street: 'test', primary_address_street_2: 'test', salutation: 'test', spouse_birthdate: 'test', spouse_name: 'test', title: 'test', vip_card_lists: 'test' })
  expect(status).toBe(201)
  expect(typeof body).toEqual('object')
  expect(body.alt_address_city).toEqual('test')
  expect(body.alt_address_country).toEqual('test')
  expect(body.alt_address_postalcode).toEqual('test')
  expect(body.alt_address_state).toEqual('test')
  expect(body.alt_address_street).toEqual('test')
  expect(body.alt_address_street_2).toEqual('test')
  expect(body.birthdate).toEqual('test')
  expect(body.child_1_birthdate).toEqual('test')
  expect(body.child_1_name).toEqual('test')
  expect(body.child_2_birthdate).toEqual('test')
  expect(body.child_2_name).toEqual('test')
  expect(body.child_3_birthdate).toEqual('test')
  expect(body.child_3_name).toEqual('test')
  expect(body.child_4_birthdate).toEqual('test')
  expect(body.child_4_name).toEqual('test')
  expect(body.child_5_birthdate).toEqual('test')
  expect(body.child_5_name).toEqual('test')
  expect(body.child_6_birthdate).toEqual('test')
  expect(body.child_6_name).toEqual('test')
  expect(body.company).toEqual('test')
  expect(body.date_entered).toEqual('test')
  expect(body.date_modified).toEqual('test')
  expect(body.deleted).toEqual('test')
  expect(body.department).toEqual('test')
  expect(body.description).toEqual('test')
  expect(body.email1).toEqual('test')
  expect(body.email2).toEqual('test')
  expect(body.first_name).toEqual('test')
  expect(body.fkq_holiday_card_lists).toEqual('test')
  expect(body.hire_date).toEqual('test')
  expect(body.id).toEqual('test')
  expect(body.last_name).toEqual('test')
  expect(body.mailing_label_home).toEqual('test')
  expect(body.mailing_label_office).toEqual('test')
  expect(body.marital_status).toEqual('test')
  expect(body.marriage_date).toEqual('test')
  expect(body.phone_fax).toEqual('test')
  expect(body.phone_home).toEqual('test')
  expect(body.phone_mobile).toEqual('test')
  expect(body.phone_other).toEqual('test')
  expect(body.phone_work).toEqual('test')
  expect(body.primary_address_city).toEqual('test')
  expect(body.primary_address_country).toEqual('test')
  expect(body.primary_address_postalcode).toEqual('test')
  expect(body.primary_address_state).toEqual('test')
  expect(body.primary_address_street).toEqual('test')
  expect(body.primary_address_street_2).toEqual('test')
  expect(body.salutation).toEqual('test')
  expect(body.spouse_birthdate).toEqual('test')
  expect(body.spouse_name).toEqual('test')
  expect(body.title).toEqual('test')
  expect(body.vip_card_lists).toEqual('test')
})

test('GET /contacts 200', async () => {
  const { status, body } = await request(app())
    .get(`${apiRoot}`)
  expect(status).toBe(200)
  expect(Array.isArray(body.rows)).toBe(true)
  expect(Number.isNaN(body.count)).toBe(false)
})

test('GET /contacts/:id 200', async () => {
  const { status, body } = await request(app())
    .get(`${apiRoot}/${contacts.id}`)
  expect(status).toBe(200)
  expect(typeof body).toEqual('object')
  expect(body.id).toEqual(contacts.id)
})

test('GET /contacts/:id 404', async () => {
  const { status } = await request(app())
    .get(apiRoot + '/123456789098765432123456')
  expect(status).toBe(404)
})

test('PUT /contacts/:id 200', async () => {
  const { status, body } = await request(app())
    .put(`${apiRoot}/${contacts.id}`)
    .send({ alt_address_city: 'test', alt_address_country: 'test', alt_address_postalcode: 'test', alt_address_state: 'test', alt_address_street: 'test', alt_address_street_2: 'test', birthdate: 'test', child_1_birthdate: 'test', child_1_name: 'test', child_2_birthdate: 'test', child_2_name: 'test', child_3_birthdate: 'test', child_3_name: 'test', child_4_birthdate: 'test', child_4_name: 'test', child_5_birthdate: 'test', child_5_name: 'test', child_6_birthdate: 'test', child_6_name: 'test', company: 'test', date_entered: 'test', date_modified: 'test', deleted: 'test', department: 'test', description: 'test', email1: 'test', email2: 'test', first_name: 'test', fkq_holiday_card_lists: 'test', hire_date: 'test', id: 'test', last_name: 'test', mailing_label_home: 'test', mailing_label_office: 'test', marital_status: 'test', marriage_date: 'test', phone_fax: 'test', phone_home: 'test', phone_mobile: 'test', phone_other: 'test', phone_work: 'test', primary_address_city: 'test', primary_address_country: 'test', primary_address_postalcode: 'test', primary_address_state: 'test', primary_address_street: 'test', primary_address_street_2: 'test', salutation: 'test', spouse_birthdate: 'test', spouse_name: 'test', title: 'test', vip_card_lists: 'test' })
  expect(status).toBe(200)
  expect(typeof body).toEqual('object')
  expect(body.id).toEqual(contacts.id)
  expect(body.alt_address_city).toEqual('test')
  expect(body.alt_address_country).toEqual('test')
  expect(body.alt_address_postalcode).toEqual('test')
  expect(body.alt_address_state).toEqual('test')
  expect(body.alt_address_street).toEqual('test')
  expect(body.alt_address_street_2).toEqual('test')
  expect(body.birthdate).toEqual('test')
  expect(body.child_1_birthdate).toEqual('test')
  expect(body.child_1_name).toEqual('test')
  expect(body.child_2_birthdate).toEqual('test')
  expect(body.child_2_name).toEqual('test')
  expect(body.child_3_birthdate).toEqual('test')
  expect(body.child_3_name).toEqual('test')
  expect(body.child_4_birthdate).toEqual('test')
  expect(body.child_4_name).toEqual('test')
  expect(body.child_5_birthdate).toEqual('test')
  expect(body.child_5_name).toEqual('test')
  expect(body.child_6_birthdate).toEqual('test')
  expect(body.child_6_name).toEqual('test')
  expect(body.company).toEqual('test')
  expect(body.date_entered).toEqual('test')
  expect(body.date_modified).toEqual('test')
  expect(body.deleted).toEqual('test')
  expect(body.department).toEqual('test')
  expect(body.description).toEqual('test')
  expect(body.email1).toEqual('test')
  expect(body.email2).toEqual('test')
  expect(body.first_name).toEqual('test')
  expect(body.fkq_holiday_card_lists).toEqual('test')
  expect(body.hire_date).toEqual('test')
  expect(body.id).toEqual('test')
  expect(body.last_name).toEqual('test')
  expect(body.mailing_label_home).toEqual('test')
  expect(body.mailing_label_office).toEqual('test')
  expect(body.marital_status).toEqual('test')
  expect(body.marriage_date).toEqual('test')
  expect(body.phone_fax).toEqual('test')
  expect(body.phone_home).toEqual('test')
  expect(body.phone_mobile).toEqual('test')
  expect(body.phone_other).toEqual('test')
  expect(body.phone_work).toEqual('test')
  expect(body.primary_address_city).toEqual('test')
  expect(body.primary_address_country).toEqual('test')
  expect(body.primary_address_postalcode).toEqual('test')
  expect(body.primary_address_state).toEqual('test')
  expect(body.primary_address_street).toEqual('test')
  expect(body.primary_address_street_2).toEqual('test')
  expect(body.salutation).toEqual('test')
  expect(body.spouse_birthdate).toEqual('test')
  expect(body.spouse_name).toEqual('test')
  expect(body.title).toEqual('test')
  expect(body.vip_card_lists).toEqual('test')
})

test('PUT /contacts/:id 404', async () => {
  const { status } = await request(app())
    .put(apiRoot + '/123456789098765432123456')
    .send({ alt_address_city: 'test', alt_address_country: 'test', alt_address_postalcode: 'test', alt_address_state: 'test', alt_address_street: 'test', alt_address_street_2: 'test', birthdate: 'test', child_1_birthdate: 'test', child_1_name: 'test', child_2_birthdate: 'test', child_2_name: 'test', child_3_birthdate: 'test', child_3_name: 'test', child_4_birthdate: 'test', child_4_name: 'test', child_5_birthdate: 'test', child_5_name: 'test', child_6_birthdate: 'test', child_6_name: 'test', company: 'test', date_entered: 'test', date_modified: 'test', deleted: 'test', department: 'test', description: 'test', email1: 'test', email2: 'test', first_name: 'test', fkq_holiday_card_lists: 'test', hire_date: 'test', id: 'test', last_name: 'test', mailing_label_home: 'test', mailing_label_office: 'test', marital_status: 'test', marriage_date: 'test', phone_fax: 'test', phone_home: 'test', phone_mobile: 'test', phone_other: 'test', phone_work: 'test', primary_address_city: 'test', primary_address_country: 'test', primary_address_postalcode: 'test', primary_address_state: 'test', primary_address_street: 'test', primary_address_street_2: 'test', salutation: 'test', spouse_birthdate: 'test', spouse_name: 'test', title: 'test', vip_card_lists: 'test' })
  expect(status).toBe(404)
})

test('DELETE /contacts/:id 204', async () => {
  const { status } = await request(app())
    .delete(`${apiRoot}/${contacts.id}`)
  expect(status).toBe(204)
})

test('DELETE /contacts/:id 404', async () => {
  const { status } = await request(app())
    .delete(apiRoot + '/123456789098765432123456')
  expect(status).toBe(404)
})
